#! /bin/sh
exit_version() {
wr -s <<- . && exit
	$APP version 15.216

	(c) 2014 - 2015 by Guenther Brunthaler.
	This script is free software.
	Distribution is permitted under the terms of the GPLv3.
.
}
APP=${0##*/}

set -e
DEFAULT_FILES_DIR=./config
LOCATE_COMMAND="ls -1 --"

exit_help() {
	files='Linux Kernel / BusyBox .config files'
        wr <<- .
	$APP - import or export Linux kernel-style $files
	
	Usage: $APP [ options ... ] <archive>

	$APP is a utility which can import and export $files from/into a
	special, text-based archive format, which strives to better exploit
	similarities between the archived $files in order to make the archive
	shorter than a compressed conventional archive of the same files.
	
	Actually, $APP is not only well-suited for archiving $files, but for
	any type of text files as well where there are a lot of duplicate
	lines (although in different places) expected to be found in the
	combined files to be archived.
	
	The archive files maintained by $APP are also especially friendly for
	version control systems by resulting in deltas as small as possible
	when .config files are added to the archive, removed from it, or
	modified.
	
	$APP stores no metadata about the archived files except for the
	basenames (and of course the contents). If modification or creation
	dates of the files are important, they should be included as part of
	the file names.
	
	Options supported:

	-c, -i:
	   Create the archive from all files found in the $DEFAULT_FILES_DIR
	   directory, which must exist and contain at least one file to be
	   archived. Does not support subdirectories. Uses "$LOCATE_COMMAND
	   $DEFAULT_FILES_DIR" to locate the files, so files hidden from the
	   shell will not be included. <archive> must not exist yet and will
	   not be overwritten.
	-x, -e:
	   Extract the contents of the archive into directory
	   $DEFAULT_FILES_DIR which will be created if it does not exist. The
	   files to be extracted must not exist yet and will not be
	   overwritten.
	-f:
	   Force output files which already exist to be overwritten instead of
	   refusing to do so.
	-P:
	   Purge "$DEFAULT_FILES_DIR", if it exists, before starting file
	   extraction.
	-d <directory>:
	   Modify the operation of $APP so that it uses <directory> instead of
	   $DEFAULT_FILES_DIR for storing/retrieving the files contained in
	   the archive.
	-h:
	   Show this usage help.
	-V:
	   Show the version of this script.

.
	exit_version
}                                           

# A study has found this to be the optimal line width for human readers.
DEFAULT_LINEWIDTH=66
MAX_LINEWIDTH=100 # Wider lines are considered too hard to read.
wr() {
	test -z "$*" && set -- -c
	fmt -w "$LINEWIDTH" "$@"
}
LINEWIDTH=; test -t 0 && LINEWIDTH=`tput cols` || LINEWIDTH=;
test ${LINEWIDTH:-$DEFAULT_LINEWIDTH} -gt $MAX_LINEWIDTH \
	&& LINEWIDTH=$MAX_LINEWIDTH
                
die() {
	echo "ERROR: $*" >& 2
	false || exit
}

tag=lnuy0rbhsijwhi42zpugchabc

cleanup() {
	local rc=$?
	rm -- "$T"
	test $rc = 0 || echo "$APP failed!" >& 2
}
T=`mktemp "${TMPDIR:-/tmp}/$APP".XXXXXXXXXX`
trap cleanup 0

missing_command() {
	die "Missing a command option!"
}

OVERWRITE=false
PURGE=false
action=missing_command
FILES_DIR=$DEFAULT_FILES_DIR
while getopts cixedPf:hV OPT; do
	case $OPT in
		c | i) action=import;;
		x | e) action=export;;
		d) test -n "$OPTARG"; $FILES_DIR=$OPTARG;;
		f) OVERWRITE=true;;
		P) PURGE=true;;
		h) action=exit_help;;
		V) action=exit_version;;
		*) false
	esac
done
shift `expr $OPTIND - 1 || :`
$action
