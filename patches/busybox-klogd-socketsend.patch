Let klogd bypass syslog()

Let it send its log messages directly to the syslog socket instead.

The reason why one might want this is a bug in the syslog()
implementation of glibc, which always replaces facility "kern" by
facility "user".

If this bug is present, all messages send by klogd look as if they
would have been sent by some user instead.

(c) 2015 by Guenther Brunthaler.
This patch is free software.
Distribution is permitted under the terms of the GPLv2.

Index: busybox-1.21.0/sysklogd/Config.src
===================================================================
--- busybox-1.21.0.orig/sysklogd/Config.src
+++ busybox-1.21.0/sysklogd/Config.src
@@ -213,6 +213,44 @@ config FEATURE_KLOGD_KLOGCTL
 
 	  If in doubt, say 'Y'.
 
+config FEATURE_KLOGD_BYPASS_SYSLOG_0275D0VTHMW1DEZDPQNSJKAP9
+	bool "Let klogd bypass glibc's syslog() API"
+	default y
+	depends on KLOGD
+	select PLATFORM_LINUX
+	help
+	  Some versions of glibc have a bug which converts all messages
+	  logged with facility "kern" into facility "user".
+
+	  If this bug is present in your glibc version, all messages
+	  sent by klogd to the syslog daemon will have "user" instead
+	  of "kern" as their facility.
+
+	  If this option is enabled, klogd bypasses the syslog API, and
+	  sends messages directly to the syslog socket. This is not as
+	  portable as using the syslog API and might only work under
+	  Linux.
+
+	  Thus enable this option only if the beforentioned bug occurs.
+
+config KLOGD_SYSLOG_SOCKET_0YKKW77XYN5EAPQ69SRIES4G8
+	string "Location of the syslog socket"
+	default "/dev/log"
+	depends on FEATURE_KLOGD_BYPASS_SYSLOG_0275D0VTHMW1DEZDPQNSJKAP9
+	help
+	  As klogd bypasses the syslog API, it is free to send its
+	  messages not just to the standard syslog socket at /dev/log,
+	  but to any other socket instead.
+
+	  Specify the path to any UNIX domain socket here where some
+	  syslog daemon is listening for log events, and klogd will
+	  send the kernel log messages there instead to the standard
+	  socket if you chose so.
+
+	  Otherwise, leave the default setting alone, and klogd will
+	  behave exactly as it were using the syslog API, except for
+	  the glibc bug which will be avoided.
+
 config LOGGER
 	bool "logger"
 	default y
Index: busybox-1.21.0/sysklogd/klogd.c
===================================================================
--- busybox-1.21.0.orig/sysklogd/klogd.c
+++ busybox-1.21.0/sysklogd/klogd.c
@@ -133,6 +133,37 @@ enum {
  * Should we open-code syslog() here to use correct facility?
  */
 
+#if ENABLE_FEATURE_KLOGD_BYPASS_SYSLOG_0275D0VTHMW1DEZDPQNSJKAP9
+
+struct globals {
+	const char *ident;
+	int facility;
+};
+
+#define G (*(struct globals*)&bb_common_bufsiz1)
+
+#ifdef openlog
+	#undef openlog
+#endif
+#define openlog klogd_openlog
+
+#ifdef syslog
+	#undef syslog
+#endif
+#define syslog klogd_syslog
+
+static void openlog(const char *ident, int option, int facility) {
+	(void)option;
+	G.ident= ident;
+	G.facility= facility;
+	/* CONFIG_KLOGD_SYSLOG_SOCKET_0YKKW77XYN5EAPQ69SRIES4G8 */
+}
+
+static void syslog(int pri, const char *fmt, ...) {
+}
+
+#endif
+
 int klogd_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int klogd_main(int argc UNUSED_PARAM, char **argv)
 {
@@ -141,6 +172,10 @@ int klogd_main(int argc UNUSED_PARAM, ch
 	int opt;
 	int used;
 
+#if ENABLE_FEATURE_KLOGD_BYPASS_SYSLOG_0275D0VTHMW1DEZDPQNSJKAP9
+	if (sizeof(struct globals) > sizeof(bb_common_bufsiz1))
+		BUG_klogd_globals_too_big();
+#endif
 	opt = getopt32(argv, "c:n", &opt_c);
 	if (opt & OPT_LEVEL) {
 		/* Valid levels are between 1 and 8 */
